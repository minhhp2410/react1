{"version":3,"sources":["Components/colorPicker.js","Components/Reset.js","Components/Result.js","Components/SizeChanger.js","App.js","serviceWorker.js","index.js"],"names":["colorPicker","props","state","color","backgroundColor","this","onReceiveColor","elmcolor","map","colors","index","key","style","scolor","className","onClick","setativecolor","Component","Reset","onReset","type","Result","borderColor","fontSize","fontsize","id","setForeColor","SizeChanger","value","onChangesize","changeSize","App","onSetcolor","bind","param","setState","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ed012e2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nclass colorPicker extends Component {\r\n    constructor(props){\r\n    super(props);\r\n    this.state={\r\n        color: ['red','green','blue','#cccc']\r\n    };\r\n}\r\nscolor(color){\r\n    return{\r\n        backgroundColor: color\r\n    };\r\n}\r\nsetativecolor(color)\r\n{\r\n    this.props.onReceiveColor(color)\r\n}\r\n    render(){  \r\n        var elmcolor=this.state.color.map((colors,index)=>{\r\n            return <span key={index} \r\n             style={this.scolor(colors)}\r\n                className={this.props.color=== colors ? 'active' : ''}\r\n                onClick={()=>this.setativecolor(colors)}\r\n            ></span>\r\n        });\r\n        return (\r\n        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n          <div className=\"panel panel-primary\">\r\n            <div className=\"panel-heading\">\r\n              <h3 className=\"panel-title\">Color Picker</h3>\r\n            </div>\r\n            <div className=\"panel-body\">\r\n                {elmcolor}\r\n                <hr/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n);\r\n}\r\n}\r\nexport default colorPicker;\r\n","import React, { Component } from 'react';\r\n\r\nclass Reset extends Component {\r\n    onReset=()=>{\r\n        this.props.onReset(true);\r\n    }\r\n    render(){\r\n  return (\r\n<button type=\"button\" className=\"btn btn-primary\" onClick={this.onReset} >reset</button>\r\n  );\r\n    }\r\n}\r\n\r\nexport default Reset;\r\n","import React, { Component } from 'react';\r\n\r\nclass Result extends Component {\r\n    setForeColor()\r\n    {\r\n        return {\r\n            color: this.props.color,\r\n            borderColor: this.props.color,\r\n            fontSize: this.props.fontsize\r\n        };\r\n    }\r\n    render(){\r\n  return (\r\n          <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n            <p>Color : {this.props.color} - Fontsize : {this.props.fontsize}px</p>\r\n            <div id=\"content\" style={this.setForeColor()} >\r\n              Nội dung setting\r\n            </div>\r\n          </div>\r\n  );\r\n    }\r\n}\r\n\r\nexport default Result;\r\n","import React, { Component } from 'react';\r\n\r\nclass SizeChanger extends Component {\r\n\r\n    changeSize(value){\r\n        this.props.onChangesize(value)\r\n    }\r\n\r\n     render()       {\r\n    return (\r\n            <div className=\"panel panel-warning\">\r\n              <div className=\"panel-heading\">\r\n  <h3 className=\"panel-title\">Size : {this.props.fontsize}px</h3>\r\n              </div>\r\n              <div className=\"panel-body\">\r\n                <button type=\"button\" className=\"btn btn-success\" onClick={()=>this.changeSize(-2)} >Giảm</button>&nbsp;\r\n                <button type=\"button\" className=\"btn btn-success\" onClick={()=>this.changeSize(2)}>Tăng</button>\r\n              </div>\r\n            </div>\r\n  );\r\n    }\r\n}\r\n\r\nexport default SizeChanger;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Colorpicker from './Components/colorPicker';\nimport Reset from './Components/Reset';\nimport Result from './Components/Result';\nimport Sizechanger from './Components/SizeChanger';\n\nclass App extends Component {\n  constructor(props)\n  {\n    super(props);\n    this.state={\n      color:'red',\n      fontsize: 16\n    };\n    this.onSetcolor=this.onSetcolor.bind(this);\n    this.onChangesize=this.onChangesize.bind(this);\n    this.onReset=this.onReset.bind(this);\n  }\n  onSetcolor(param)\n  {\n    this.setState({\n      color: param\n    });\n  }\n  onChangesize(value)\n  {\n      this.setState({\n          fontsize: (this.state.fontsize+value>=8 && this.state.fontsize+value<=36)? this.state.fontsize+value: this.state.fontsize\n      });\n    }\n    onReset(value)\n    {\n      if(value)\n      this.setState({\n        color: 'red',\n        fontsize: 16\n      });\n    }\n  render(){\n  return (\n    <div className='container mt-50'>\n        <div className='row'>\n          <Colorpicker color={this.state.color}\n          onReceiveColor={this.onSetcolor}\n          />\n          <div class=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n          <Sizechanger fontsize={this.state.fontsize} \n          onChangesize={this.onChangesize}\n          />\n          <Reset onReset={this.onReset}/>\n          </div>\n          </div>\n          <Result color={this.state.color} fontsize={this.state.fontsize}/>\n          </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}